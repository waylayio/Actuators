{
  "name": "azureStorage",
  "version": "0.0.5",
  "type": "actuator",
  "script": "var resource  = options.requiredProperties.resource || options.node.RESOURCE ||  options.task.RESOURCE || options.node.NAME;\nvar payload = options.requiredProperties.payload;\n\nvar table = options.requiredProperties.table;\nvar storageAccount = options.requiredProperties.storageAccount || options.globalSettings.AZURE_STORAGE_ACCOUNT; \nvar accountKey = options.globalSettings.AZURE_ACCOUNT_KEY || options.requiredProperties.accountKey;\nvar tableService = azure.createTableService(storageAccount, accountKey);\nvar partitionKey = resource; //\n\nfunction guid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n    s4() + '-' + s4() + s4() + s4();\n}\n\nvar storeMessages = function(entities){\n    var deferred = Q.defer();\n    tableService.createTableIfNotExists(table, function(error, result, response) {\n        if (!error) {\n            var batch = new azure.TableBatch();\n            _.each(entities, function(entity){\n                if(entity.PartitionKey === undefined)\n                    entity.PartitionKey = {'_': partitionKey};\n                if(entity.RowKey === undefined)\n                    entity.RowKey = {'_':  guid()};\n                console.log(\"add entity\", entity)\n                batch.insertEntity(entity);\n            }) \n            tableService.executeBatch(table, batch, function (error, result, response) {\n              if(!error) {\n                deferred.resolve(response);\n              }\n              deferred.reject(error);\n            });\n        }\n        else \n            deferred.reject(error);\n    });\n\n    return deferred.promise;\n}\n\nif(payload){\n    try{\n       msg = waylayUtil.template(options, payload);    \n       if (typeof msg === 'string') {\n           console.log(\"trying to parse to JSON\");\n            msg = JSON.parse(msg);\n        }\n        console.log(\"Parsed using eval\");\n        console.log(msg);\n    } catch(err){\n        console.log(\"eval failed with \" + err);\n        console.log(\"trying using raw data\");\n        try {\n            msg = waylayUtil.getRawData(options, payload);\n        } catch(err){\n            console.log(\"raw data failed with \" + err);\n        }\n    } \n} else {\n    try {\n        msg = waylayUtil.getRawData(options, options.node.NAME);\n    } catch(err){\n        console.log(\"trying raw data failed for: \" + options.node.NAME);\n    }\n}\n\nif(msg !== undefined){\n    if(!Array.isArray(msg))\n       msg = [msg];\n    var promises = [];\n    var batchArrays = _.chunk(msg, 100);\n    _.each(batchArrays, function(array){\n        promises.push(storeMessages(array))\n    });\n    Q.all(promises).then(function(){\n        console.log(\"DONE\"); \n        send();\n    }).fail(function(err){\n        send(new Error(err));\n    });\n    /*storeMessages(msg).then(function(){\n        console.log(\"DONE\"); \n        send();\n    }).fail(function(err){\n        send(new Error(err));\n    });*/\n} else{\n    send(new Error(\"Missing message\"));\n}\n",
  "metadata": {
    "author": "",
    "category": "IOT Platform",
    "description": "Azure Storage actuator",
    "iconURL": "https://static.waylay.io/plugs/icons/azure.png",
    "supportedStates": [],
    "requiredProperties": [
      "storageAccount",
      "accountKey",
      "table",
      "resource",
      "payload"
    ],
    "requiredRawData": []
  }
}
