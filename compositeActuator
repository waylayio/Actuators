{
  "name": "compositeActuator",
  "version": "1.0.0",
  "type": "actuator",
  "script": "var values = waylayUtil.getProperty(options, \"values\")\nvar actuator = waylayUtil.getProperty(options, \"actuator\")\n\nvar actuatorP = function(properties) {\n   console.log(\"properties\", properties)\n   return waylay.actuators.execute(actuator, 'latest', {properties})\n}\n\nvar actuations = []\n_.map(values, value => {\n    console.log(\"value\", value)\n    value = _.mapValues(value, v => { \n        if(_.isString(v) && v.indexOf(\"{{\") > -1)\n            return waylayUtil.template(options, v)\n        else\n            return v\n    })\n    actuations.push(actuatorP(value))\n})\n\nPromise.all(actuations)\n.then((response) => {console.log(response);send()})\n.catch(err => send(new Error(err)))",
  "metadata": {
    "author": "",
    "category": "Waylay",
    "description": "Composite actuator, it will send as many actions \nas there are objects in the values list.\nValues are list of arguments required by the actuator.\nAs from version 1.0.0. it uses waylay nmp package (sandbox 0.14.0)\n\nFor instance <pre>\n[{ \n \"from\": \"foo@bar\",\n \"to\" : \"hello@world\",\n \"message\" : \"hi\",\n  \"subject\" : \"test\"\n  },\n  { \n \"from\": \"foo@bar\",\n \"to\" : \"hello@world\",\n \"message\" : \"hi\",\n  \"subject\" : \"test\"\n  }]\n  </pre>\nfor the actuator templateMail will send 2 mails with inputs as \ndefined in the array\n",
    "iconURL": "https://static.waylay.io/plugs/icons/box_out.png",
    "supportedStates": [],
    "requiredProperties": [
      "actuator",
      "values"
    ],
    "requiredRawData": []
  }
}
