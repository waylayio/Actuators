{
  "name": "dweetSendThing",
  "version": "1.0.2",
  "type": "actuator",
  "script": "var resource = options.node.RESOURCE || options.task.RESOURCE;\nvar thing  = options.requiredProperties.thing || resource;\n\nvar msg = \"waylay message\";\nif(options.requiredProperties.message)\n    msg = waylayUtil.template(options, options.requiredProperties.message);\n\nvar data = {\n    node: options.node.NODE,\n    time: new Date(),\n    message : msg\n}\n\nif(thing){\n  var url = \"https://dweet.io:443/dweet/for/\"+ thing;\n  var options = {\n    url: url,\n    json: data\n  };\n  var callback = function(error, response, body) {\n    if (!error && response.statusCode == 200) {\n      console.log(body);\n      send();\n    }else{\n      send(new Error(\"Calling dweet failed: \" + error + \" \" + body));\n    }\n  };\n  request.post(options, callback);\n}else{\n  send(new Error(\"Missing properties\"));\n}",
  "metadata": {
    "author": "",
    "category": "IOT",
    "description": "Dweet actuator\n\nActuator will post a dweet with resource name, and data payload.\n\"thing\" will be either an input paramter, or if not defined it will \ntry to mach it with resource defined either on the node or the task level.\n\nInputs:\n<ul>\n<li>thing, or if NOT defined, sensor takes the resource</li>\n<li>message, which is pre-processed by waylayUtil.evaluateData package</li>\n</ul>\n\nData payload:\n<ul>\n<li>node: node name</li>\n<li>time: time it was triggered, in UTC milis</li>\n<li>message, which is pre-processed by waylayUtil.template package</li>\n</ul>\n\n\n",
    "documentationURL": "https://dweet.io/play/",
    "iconURL": "https://raw.githubusercontent.com/waylayio/documentation/master/icons/dweet.png",
    "supportedStates": [],
    "requiredProperties": [
      "thing",
      "message"
    ],
    "requiredRawData": []
  }
}
