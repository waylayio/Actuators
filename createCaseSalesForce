{
  "name": "createCaseSalesForce",
  "version": "1.0.2",
  "type": "actuator",
  "script": "/**\n * main() is called at the end of this file.\n */\nasync function main () {\n\n    Object.assign(options, { hoardUrl: 'https://auth-staging.waylay.io' })\n        \n    let caseObject = { }\n    caseObject.Subject = waylayUtil.getProperty(options, \"Subject\")\n    caseObject.Description = waylayUtil.getProperty(options, \"Description\")\n    caseObject.Status = waylayUtil.getProperty(options, \"Status\")\n    caseObject.Priority = waylayUtil.getProperty(options, \"Priority\")\n    caseObject.AssetId = waylayUtil.getProperty(options, \"AssetId\")\n    caseObject.AccountId = waylayUtil.getProperty(options, \"AccountId\")\n    caseObject.Reason = waylayUtil.getProperty(options, \"Reason\")\n    caseObject.OwnerId = waylayUtil.getProperty(options, \"OwnerId\")\n    caseObject.Product__c = waylayUtil.getProperty(options, \"Product__c\")\n    // trying to manipulate a const instead of let will get stuck until timeout\n    caseObject = _.reduce(caseObject, (acc, v, k) => {\n        if (v) acc[k] = v   \n        return acc\n    }, {})\n    \n    if(caseObject.Subject)\n        caseObject.Subject = waylayUtil.template(options, caseObject.Subject)\n    if(caseObject.Description)\n        caseObject.Description = waylayUtil.template(options, caseObject.Description)\n    \n    try {\n        const conn = await getSalesforceConnection()\n        conn.sobject(\"Case\").create(caseObject, function(err, ret) {\n            err \n                ? send(new Error(err))\n                : send(null, { message: JSON.stringify(ret) })\n        })\n    } catch(error) {\n        send(error)\n    }\n}\n\n/**\n * @return Salesforce Connection\n */\nasync function getSalesforceConnection () {\n    try {\n        // TRY TO GET A SALESFORCE CONNECTION USING HOARD\n        const connHoard = await getSalesforceConnectionWithHoard()\n        console.log('connection is made with hoard')\n        return connHoard\n    } catch (hoardError) {\n        try {\n            // TRY TO USE A SALESFORCE CONNECTION USING GLOBAL SETTINGS: 'salesForceUser' and 'salesForceToken'\n            const connGlobalSettings = await getSalesforceConnectionWithGlobalSettings()\n            console.log('connection is made with global settings')\n            return connGlobalSettings\n        } catch(globalSettingsError){\n             throw new Error(`\n                MESSAGE: 'unable to get salesforce connection trough either hoard or global settings', \\n\n                HOARD ERROR: ${hoardError} \\n \n                GLOBAL SETTINGS ERROR: ${globalSettingsError} \\n\n                POSSIBLE SOLUTION: Connect Salesforce trough channels or set 'salesForceUser' and 'salesForceToken' in the global settings\n            `)\n        }\n    }\n}\n\nasync function getSalesforceConnectionWithHoard() {\n    const user = waylayUtil.getProperty(options, \"user\") || \"organisation\"\n\n    const tokens = await waylayUtil.getAuthTokens(options, user, \"salesforce\")\n\n    if(!user || !tokens) \n        throw new Error('No user or token provided via Hoard service')\n    \n    const conn = new jsforce.Connection({\n      instanceUrl : 'https://eu26.salesforce.com',\n      accessToken : tokens.access_token\n    })\n    \n    return conn\n}\n\nasync function getSalesforceConnectionWithGlobalSettings() {\n    const user = options.globalSettings.salesForceUser\n    const token = options.globalSettings.salesForceToken\n\n    if(!user || !token) \n        throw new Error('No user or token provided via global settings')\n    \n    const conn = new jsforce.Connection()\n    return new Promise((resolve, reject) => {\n        conn.login(user, token, function(err, res) {\n            err ? reject(err) : resolve(conn)\n        })\n    })\n}\n\nmain()\n\n\n",
  "metadata": {
    "author": "",
    "category": "SalesForce",
    "description": "Add case in SalesForce, all fields are optional.\nIf accountId is not provided, it will be using the account\nof the person to who belongs the API token.\nIf AssetId it will take waylay resource as AssetId.",
    "iconURL": "https://static.waylay.io/plugs/icons/salesforce-create-case.png",
    "supportedStates": [],
    "requiredProperties": [
      "Subject",
      "Status",
      "Priority",
      "AssetId",
      "AccountId",
      "Reason",
      "OwnerId",
      "Product__c",
      "Description"
    ],
    "requiredRawData": []
  }
}
