{
  "name": "waylayClearAlarm",
  "version": "0.0.2",
  "type": "actuator",
  "script": "var username =  options.globalSettings.API_KEY\nvar password = options.globalSettings.API_PASS\nvar resource, type\n\ntry{\n    resource = waylayUtil.getRawData(options, options.requiredProperties.resource)\n} catch(err){\n    resource = options.requiredProperties.resource || waylayUtil.getResource(options)  \n}\nif(resource === '$')\n  resource = options.node.NAME\n\ntry{\n    type = waylayUtil.getRawData(options, options.requiredProperties.type)\n} catch(err){\n    type = options.requiredProperties.type \n}\n\nvar alarm = {\n    type:type,\n    source: resource,\n    size: 5\n}\n\nvar findAlarms = function(alarm){\n    console.log(\"findAlarms\")\n    var deferred = Q.defer()\n    var url = \"https://alarms.waylay.io/alarm/alarms\"\n    var options = {\n        url: url,\n        qs: alarm,\n        auth: {\n            user: username,\n            pass: password,\n            sendImmediately: true\n        }\n    }\n    try{\n        request(options, function(error, response, body) {\n        if (!error && response.statusCode == 200) {\n            return deferred.resolve(_.map(JSON.parse(body).alarms, a=> {\n                if(a.status.toLowerCase() !== \"cleared\"){\n                    var aa = {\n                        id: a.id,\n                        status : \"CLEARED\"\n                    }\n                    return clearMessage(aa)\n                }\n            }))\n        } else{\n            deferred.reject(error)\n        }\n    })\n    }catch(err){\n         deferred.reject(error)\n    }\n    return deferred.promise\n}\n\nvar clearMessage = function(alarm){\n    console.log(\"clearMessage\", alarm)\n    var deferred = Q.defer()\n    console.log(\"clear alarm \" + JSON.stringify(alarm))\n    var url = \"https://alarms.waylay.io/alarm/alarms/\"+alarm.id;\n    var options = {\n        url: url,\n        json: alarm,\n        auth: {\n            user: username,\n            pass: password,\n            sendImmediately: true\n        }\n    };\n    request.put(options, function(error, response, body) {\n        if (!error && response.statusCode == 200) {\n            console.log(\"alarm cleared \" ,body);\n            deferred.resolve(response)\n        } else{\n            console.log(\"alarm rejected \" + body)\n            deferred.reject(body)\n        }\n    });\n    return deferred.promise\n}\n\n\nif(resource === undefined || resource === \"\"){\n    send(new Error(\"resource not defined\"))\n} else {\n    findAlarms(alarm).then(function(promises) {\n        Q.all(promises).then(function(){\n        console.log(\"DONE\")\n        send()\n        }).fail(function(err){\n            send(new Error(\"Clearing alarms failed: \" + err))\n        });\n    })\n}\n\n\n\n\n",
  "metadata": {
    "author": "",
    "category": "Waylay",
    "description": "Clear all alarms for a given resource and type.\n\n",
    "documentationURL": "",
    "iconURL": "https://s3.eu-central-1.amazonaws.com/static.waylay.io/plugs/icons/green_bell.png",
    "supportedStates": [],
    "requiredProperties": [
      "resource",
      "type"
    ],
    "requiredRawData": []
  }
}
