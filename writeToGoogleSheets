{
  "name": "writeToGoogleSheets",
  "version": "1.1.2",
  "type": "actuator",
  "script": "const { google } = require('googleapis')\nconst { get, first } = require('lodash')\nconst moment = require('moment-timezone')\n\nconst props = options.requiredProperties;\nconst clientId = options.globalSettings.DASHBOARD_KEY;\nconst clientSecret = options.globalSettings.DASHBOARD_SECRET;\nconst dashboardDomain = options.globalSettings.DASHBOARD_DOMAIN;\n\nconst fileName = props.file\nconst columns = formatColumns(props.columns || '')\nconst message = waylayUtil.template(options, props.message)\nconst timezone = props.timezone || 'Europe/Berlin'\nconst worksheet = props.worksheet || \"Data\"\nconst profile = props.profile\nconst providerName = 'googledrive'\nconst decimalSeperator = props.decimalSeperator || '.'\n\nlet driveClient\nlet sheetsClient\n\nif(clientId !== undefined && clientSecret !== undefined && dashboardDomain !== undefined && fileName !== undefined && message !== undefined) {\n    getTokenFromConrad()\n        .then(res => {\n            const { accessToken } = res\n            \n            if (!accessToken) return Promise.reject(`No token for ${profile}`)\n            \n            driveClient = getAPIClient('drive', accessToken)\n            sheetsClient = getAPIClient('sheets', accessToken)\n            \n            return getFile(fileName)\n              .then(file => {\n                const { id: spreadsheetId } = file\n                const values = formatValues(message)\n        \n                return checkWorksheetOrCreate(spreadsheetId, worksheet)\n                  .then(res => updateColumnTitles(spreadsheetId, worksheet, columns))\n                  .then(res => appendValues(spreadsheetId, worksheet, values))\n                  .then(_ => send())\n              })\n        })\n        .catch(err => {\n            send(new Error(`Failed to actuate on ${JSON.stringify(err)}`))\n        })\n} else {\n    send(new Error(\"Missing properties\"))\n}\n\nfunction getTokenFromConrad () {\n    const options = {\n        url: `https://${dashboardDomain}/api/token/${providerName}/${profile}`,\n        auth: {\n            user: clientId,\n            password: clientSecret\n        },\n        method: 'GET',\n        json: true\n    }\n\n    return requestP(options)\n}\n\nfunction getAPIClient (type, accessToken) {\n  const OAuth2 = google.auth.OAuth2\n\n  const oauth2Client = new OAuth2()\n  oauth2Client.setCredentials({\n    access_token: accessToken,\n    refresh_token: ''\n  })\n\n  switch (type) {\n    case 'drive': return google.drive({\n      version: 'v3',\n      auth: oauth2Client\n    })\n    case 'sheets': return google.sheets({\n      version: 'v4',\n      auth: oauth2Client\n    })\n  }\n}\n\nfunction updateColumnTitles (spreadsheetId, worksheet, columns) {\n  return new Promise((resolve, reject) => {\n    sheetsClient.spreadsheets.values.update({\n      spreadsheetId,\n      range: `${worksheet}!A1:Z1`,\n      valueInputOption: 'USER_ENTERED',\n      resource: {\n        values: [columns]\n      }\n    }, (err, result) => err ? reject(err) : resolve(result))\n  })\n}\n\nfunction appendValues (spreadsheetId, worksheet, values) {\n  return new Promise((resolve, reject) => {\n    sheetsClient.spreadsheets.values.append({\n      spreadsheetId,\n      range: `${worksheet}!A1:Z1`,\n      valueInputOption: 'USER_ENTERED',\n      resource: {\n        values: [values]\n      }\n    }, (err, result) => err ? reject(err) : resolve(result))\n  })\n}\n\nfunction checkWorksheetOrCreate (spreadsheetId, worksheet) {\n  return new Promise((resolve, reject) => {\n    sheetsClient.spreadsheets.values.get({\n      spreadsheetId,\n      range: `${worksheet}!A1:Z1`\n    }, (err, result) => {\n      if (!err) return resolve(result)\n\n      sheetsClient.spreadsheets.batchUpdate({\n        spreadsheetId,\n        resource: {\n          requests: [{\n            addSheet: {\n              properties: { title: worksheet }\n            }\n          }]\n        }\n      }, (err, result) => err ? reject(err) : resolve(result))\n    })\n  })\n}\n\nfunction getFile (fileName) {\n  return new Promise((resolve, reject) => {\n    driveClient.files.list({\n      trashed: false,\n      spaces: 'drive',\n      q: `name = '${fileName}' and trashed = false and mimeType = 'application/vnd.google-apps.spreadsheet'`\n    }, (err, res) => {\n      if (err) return reject(err)\n\n      const file = first(get(res, 'data.files', []))\n      if (file) return resolve(file)\n\n      return createSheet(fileName)\n        .then(res => resolve(res))\n        .catch(err => reject(err))\n    })\n  })\n}\n\nfunction createSheet (fileName) {\n  return new Promise((resolve, reject) => {\n    sheetsClient.spreadsheets.create({\n      resource: {\n        properties: { title: fileName },\n        sheets: [{\n          properties: { title: worksheet }\n        }]\n      }\n    }, (err, spreadsheet) => {\n      if (err) return reject(err)\n\n      const { data } = spreadsheet\n      return resolve(Object.assign({}, data, { id: data.spreadsheetId }))\n    })\n  })\n}\n\nfunction formatValues (message) {\n    const values = message.split('|||').map(value => value.replace('.', decimalSeperator).trim())\n    return [moment().tz(timezone).format('DD/MM/YYYY HH:mm:ss'), ...values]\n}\n\nfunction formatColumns (columns) {\n    const values = columns.split('|||')\n    return ['Time', ...values]\n}",
  "metadata": {
    "author": "",
    "category": "Google Drive",
    "description": "<h1>Write to Google Sheets</h1>\n\nWrites a value to a given Google Sheets file. If this file does not exist then it will be created.\nThe worksheet where the data is written to defaults to Data if there is no name for the actuator.\n\n<p>\n<strong>Multiple column support: </strong>begin by specifing the header of the worksheet in the column property.\nThis is a ||| seperated list. When you don't specify this than by default it will make them for you (eg: <code>temperature|||humidity</code>).\nThen in message specify your list of items seperated by '|||'. The first value (timestamp) will automaticly be added, so you dont need to specify this (eg: <code>18.4|||65</code>)\n</p>",
    "iconURL": "https://static.waylay.io/plugs/icons/sheets.png",
    "supportedStates": [],
    "requiredProperties": [
      "file",
      "message",
      "timezone",
      "worksheet",
      "profile",
      "columns",
      "decimalSeperator"
    ],
    "requiredRawData": []
  },
  "dependencies": {
    "googleapis": "27",
    "lodash": "^4.17.11",
    "moment": "^2.22.2",
    "moment-timezone": "^0.5.23"
  }
}
