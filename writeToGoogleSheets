{
  "name": "writeToGoogleSheets",
  "version": "1.0.1",
  "type": "actuator",
  "script": "var worksheetName = waylayUtil.getProperty(options, \"worksheet\") || \"Data\"\nvar message = waylayUtil.template(options, options.requiredProperties.message)\nvar file = waylayUtil.getProperty(options, \"file\")\n\nvar decimalSeperator = options.requiredProperties.decimalSeperator || '.'\nvar timezone = options.requiredProperties.timezone || 'Europe/Berlin'\nvar _xml2js = require('xml2js').Parser().parseString\nvar user = waylayUtil.getProperty(options, \"user\") || \"organisation\"\n\n\nvar _auth;\nvar _xclient;\nvar _sheet;\n\nvar VALUE_SEP = \"|||\";\nvar COLUMN_SEP = \"|||\";\nvar TIMESTAMP_NAME = \"Time\";\nvar DEFAULT_COLUMN_PREFIX = \"Val\";\nvar columns = options.requiredProperties.columns.split(COLUMN_SEP);\n\nif (columns.length == 1 && !columns[0]) \n    columns.pop();\n\ncolumns.splice(0, 0, TIMESTAMP_NAME);\n\nvar cd = columns.length - 1;\nvar messageCount = message.split(VALUE_SEP).length;\nwhile(messageCount > cd) \n    columns.push(DEFAULT_COLUMN_PREFIX + (++cd));\n\n// tools\nvar xmlSafeValue = function(val){\n  if ( val === null ) return '';\n  return String(val).replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;');\n};\nvar xmlSafeColumnName = function(val){\n  if (!val) return '';\n  return String(val).replace(/[\\s_]+/g, '')\n      .toLowerCase();\n};\nvar xml2js = function(data) {\n  return new Promise(function(resolve, reject) {\n    _xml2js(data, function(err, res) {\n      if (err !== undefined) {\n        resolve(res);\n      } else {\n        reject(err);\n      }\n    });\n  });\n};\nvar generateInputData = function() {\n    var messages = message.split(VALUE_SEP);\n    var input = {header: {}, data: {}};\n    var cOffset = 0; // column offset\n    var dOffset = 0; // data offset\n    var cdate = xmlSafeColumnName(columns[cOffset]);\n    input.header[cdate] = columns[cOffset++];\n    input.data[cdate] = moment().tz(timezone).format('DD/MM/YYYY HH:mm:ss');\n    \n    for (;cOffset < columns.length; ++cOffset) {\n        var columnName = columns[cOffset];\n        var value = messages[dOffset++];\n        var safeColumnName = xmlSafeColumnName(columnName);\n        \n        input.header[safeColumnName] = columnName;\n        input.data[safeColumnName] = value.replace('.', decimalSeperator);\n    }\n    return input;\n}\nfunction mapLink(link) {\n  var elem = link['$'];\n  var rels = elem.rel.split('#');\n  var type = rels[rels.length - 1];\n  var href = elem.href;\n  return [type, href];\n}\n\nvar _xmlAtom = function(accessToken, url, data, method, ifmatch) {\n  if (ifmatch === undefined) {\n    ifmatch = true;\n  }\n  console.log(method + ' -> ' + url);\n  return new Promise(function(resolve, reject) {\n    request({\n      url: url,\n      headers: {\n        'Content-Type': 'application/atom+xml; charset=UTF-8',\n        'Authorization': 'Bearer ' + accessToken,\n       'If-Match': ifmatch ? '*' : undefined,\n        'Gdata-Version': '3.0'\n      },\n      method: method,\n      body: data\n    }, function(error, response, body) {\n      console.log(method + ' <- ' + url);\n      if (error !== undefined) {\n        resolve(response, body);\n      } else {\n        reject(error);\n      }\n    });\n  });\n};\nfunction XmlAtomClient(accessToken) {\n    this.post = function(url, data, ifmatch) {\n        return _xmlAtom(accessToken, url, data, 'POST', ifmatch);\n    }\n    \n    this.put = function(url, data, ifmatch) {\n        return _xmlAtom(accessToken, url, data, 'PUT', ifmatch);\n    }\n}\nfunction requestP(options) {\n  var method = options.method || \"GET\";\n  console.log(method + ' -> ' + options.url);\n  return new Promise(function(resolve, reject){\n    var start = new Date().getTime();\n    console.log(method + '  ' + options.url);\n    request(options, function(err, response, body) {\n      var end = new Date().getTime();\n      var status = '-';\n      if(response) {\n        status = response.statusCode\n      }\n      if(err){\n        reject(err);\n      }else{\n        resolve({\n          response: response,\n          body: body\n        });\n      }\n    });\n  });\n}\nfunction findInDrive(name, type, pathid) {\n  var q = \"title = '\" + name+\"' and mimeType='\" + type + \"'\";\n  if (pathid !== undefined) {\n    q += \" and '\" + pathid + \"' in parents\";\n  }\n  return requestP({\n    url: 'https://www.googleapis.com/drive/v2/files?q=' + encodeURIComponent(q),\n    method: 'GET',\n    auth: _auth\n  })\n  .then(function(response) {\n    var json = JSON.parse(response.body);\n    var items = _.filter(json.items, function(item) {return !item.labels.trashed;});\n    return _.map(items, function(item) {\n      return {\n        id: item.id,\n        name: item.title,\n        isParentRoot: item.parents[0] ? item.parents[0].isRoot : false\n      };\n    });\n  });\n}\nfunction generatePromiseRoot(item, last, type) {\n  return findInDrive(item, type)\n    .then(function(items) {\n      var file = _.find(items, function(i) { return i.isParentRoot; });\n      if (file !== undefined && file !== null) {\n        return file;\n      } else {\n        if (last) {\n          return createSheet(item);\n        } else {\n          return createFile({\n            mimeType: 'application/vnd.google-apps.folder',\n            title: item,\n            parents: [{ id: 'root' }]\n          });\n        }\n      }\n    });\n}\nfunction extendPromiseForFetching(promise, item, last, type) {\n  return promise.then(function(file) {\n    return findInDrive(item, type, file.id)\n      .then(function(files) {\n        var selectedFile = files[0];\n        if (selectedFile !== undefined) {\n          return selectedFile;\n        } else {\n          var parent = {\n            'id': file.id\n          };\n          if (last) {\n            parent.kind = 'drive#fileLink';\n          }\n          return createFile({\n            mimeType: type,\n            title: item,\n            parents: [parent]\n          });\n        }\n      });\n  });\n}\n// TODO: make this code better\nfunction createOrOpenSheet(pathname) {\n  var parts = pathname.split('/');\n  var index = 0;\n  var promise;\n\n  _.each(parts, function(item) {\n    var last = index === parts.length - 1;\n    var type = last ? 'application/vnd.google-apps.spreadsheet' : 'application/vnd.google-apps.folder';\n    if (!(promise !== undefined)) {\n      promise = generatePromiseRoot(item, last, type);\n    } else {\n      promise = extendPromiseForFetching(promise, item, last, type);\n    }\n    index++;\n  });\n\n  return promise;\n}\nfunction createSheet(name) {\n  return createFile({\n      'mimeType': 'application/vnd.google-apps.spreadsheet',\n      'title': name,\n    });\n}\nfunction createFile(content) {\n console.log('Creating file', content.title );\n var url = 'https://www.googleapis.com/drive/v2/files/';\n\n  return requestP({\n    url: url,\n    method: 'POST',\n    auth: _auth,\n    headers: [\n      {\n        name: 'content-type',\n        value: 'application/json'\n      }\n    ],\n    json: content\n  })\n    .then(function(resp) {\n      return {\n        title: content.name,\n        id: resp.body.id\n      };\n    });\n}\nfunction listWorksheets(sheet) {\n  return requestP({\n    url: 'https://spreadsheets.google.com/feeds/worksheets/key/private/full'.replace('key', sheet.id),\n    method: 'GET',\n    auth: _auth\n  })\n    .then(function(res) {\n      //console.log(\"response\", res.body)\n      return xml2js(res.body);\n    })\n    .then(function(sheetInfo) {\n    //console.log(\"sheetInfo\", sheetInfo)\n      return _.map(sheetInfo['feed']['entry'], function(worksheet) {\n        var d = worksheet['id'][0].split('/');\n        return {\n          id: d[d.length - 1],\n          title: worksheet['title'][0]['_'],\n          links: _.reduce(_.map(worksheet['link'], mapLink), function(o, v) {o[v[0]] = v[1]; return o;}, {})\n        };\n      });\n    });\n}\nfunction createWorksheet(sheet, worksheetname) {\n   //console.log(\"createWorksheet\")\n  var data = '<entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:gs=\"http://schemas.google.com/spreadsheets/2006\"><title>$title$</title><gs:rowCount>1000</gs:rowCount><gs:colCount>26</gs:colCount></entry>'\n    .replace('$title$', xmlSafeValue(worksheetname));\n  return _xclient.post('https://spreadsheets.google.com/feeds/worksheets/key/private/full'.replace('key', sheet.id), data, false)\n    .then(function(response, body) {\n      console.log(\"createWorksheet body\", response.body)  \n      return xml2js(response.body);\n    })\n    .then(function(worksheetInfo) {\n      worksheetInfo = worksheetInfo['entry'];\n      var d = worksheetInfo['id'][0].split('/');\n      return {\n        id: d[d.length - 1],\n        title: worksheetInfo['title'][0]['_'],\n        links: _.reduce(_.map(worksheetInfo['link'], mapLink), function(o, v) {o[v[0]] = v[1]; return o;}, {})\n      };\n    });\n}\nfunction GoogleWorksheet(worksheet) {\n  this.worksheet = worksheet;\n  var self = this;\n  var cellApi = worksheet.links.cellsfeed;\n  var listApi = worksheet.links.listfeed || cellApi.replace('cells', 'list');\n\n  this.getLists = function() {\n    return requestP({\n      url: listApi,\n      method: 'GET',\n      auth: _auth\n    })\n    .then(function(data) {\n      return xml2js(data.body);\n    })\n    .then(function(js) {\n      return js.feed.entry || [];\n    });\n  };\n\n  this.getCells = function() {\n    return requestP({\n      url: cellApi,\n      method: 'GET',\n      auth: _auth\n    })\n    .then(function(data) {\n      return xml2js(data.body);\n    })\n    .then(function(js) {\n      return js.feed.entry || [];\n    });\n  };\n\n  this.updateCellBatchRequestBuilder = function() {\n    return new CellBatchRequestBuilder(cellApi);\n  };\n\n  this.addLine = function(line) {\n   var contents = '<entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:gsx=\"http://schemas.google.com/spreadsheets/2006/extended\">';\n\n   _.each(line, function(v, k) {\n     var sk = xmlSafeColumnName(k);\n     var sv = xmlSafeValue(v);\n     contents += '<gsx:' + sk + '>' + sv + '</gsx:' + sk + '>';\n   });\n\n   contents += '</entry>';\n\n   return _xclient.post(listApi, contents, false)\n     .then(function(response, body) {\n       return xml2js(response.body);\n     });\n\n  };\n\n  var createCellName = function(x, y) {\n    return 'R' + y + \"C\" + x;\n  };\n\n  this.setCell = function(x, y, id, content) {\n    var cname = createCellName(x,y);\n    var contents = '<entry xmlns=\"http://www.w3.org/2005/Atom\" xmlns:gs=\"http://schemas.google.com/spreadsheets/2006\">';\n    contents += '<id>' + cellApi + '/' + cname + '</id>';\n    contents += '<link rel=\"edit\" type=\"application/atom+xml\" href=\"' + cellApi + '/' + cname + '\" />';\n    contents += '<gs:cell row=\"' + y + '\" col=\"' + x + '\" inputValue=\"' + content + '\"  />';\n    contents += '</entry>';\n\n    return _xclient.put(cellApi + '/' + cname, contents)\n      .then(function(r) { return xml2js(r.body);})\n      ;\n  };\n}\nfunction CellBatchRequestBuilder(cellApi) {\n  this.cellApi = cellApi;\n  var self = this;\n  var contents = '<feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:batch=\"http://schemas.google.com/gdata/batch\" xmlns:gs=\"http://schemas.google.com/spreadsheets/2006\">';\n  contents += '<id>' + cellApi + '</id>';\n  var createCellName = function(x, y) {\n    return 'R' + y + \"C\" + x;\n  };\n\n  var _cell = function(x, y, id, content, action) {\n    contents += '<entry>';\n    var cname = createCellName(x,y);\n    contents += '<batch:id>' + id + '</batch:id>';\n    contents += '<batch:operation type=\"' + action + '\" />';\n    contents += '<title type=\"text\">' + id + '</title>';\n    contents += '<id>' + cellApi + '/' + cname + '</id>';\n    contents += '<link rel=\"edit\" type=\"application/atom+xml\" href=\"' + cellApi + '/' + cname + '\" />';\n    contents += '<gs:cell row=\"' + y + '\" col=\"' + x + '\" inputValue=\"' + content + '\" />';\n    contents += '</entry>';\n    return self;\n  };\n\n  this.updateCell = function(x, y, id, content) {\n    return _cell(x, y, id, content, 'update');\n  };\n\n  this.makeRequest = function() {\n    contents += '</feed>';\n    return _xclient.post(cellApi + '/batch', contents)\n      .then(function(response) {\n        return xml2js(response.body);\n      });\n  };\n\n}\n\nif(file !== undefined && message !== undefined){\n    var inputData = generateInputData();\n    waylayUtil.getAuthTokens(options, user, \"googledrive\")\n        .then(token =>{\n            _auth = {\n                'bearer': token.access_token\n            };\n            _xclient = new XmlAtomClient(token.access_token);\n            return createOrOpenSheet(file);\n        })\n        .then(function(sheet) {\n            _sheet = sheet;\n            return listWorksheets(sheet);\n        })\n        .then(function(worksheets) {\n            return _.find(worksheets, function(obj) { return obj.title === worksheetName; });\n        })\n        // .then(function(worksheet) {\n        //     _worksheet = new GoogleWorksheet(worksheet);\n        //     return _worksheet.getCells();\n        // })\n        .then(function(worksheet) {\n            if (worksheet) {\n                _worksheet = new GoogleWorksheet(worksheet);\n            }else{\n                return createWorksheet(_sheet, worksheetName).then(worksheet => {\n                    _worksheet = new GoogleWorksheet(worksheet);\n                    var builder = _worksheet.updateCellBatchRequestBuilder();\n                    var x = 0;\n                    var y = 1;\n                    _.each(inputData.header, function(name, key) {\n                        builder.updateCell(++x, y, key, name);\n                    })\n                    return builder.makeRequest();\n                })\n            }\n        })\n        .then(function(_) {\n            return _worksheet.addLine(inputData.data);\n        })\n        .then(function(d) {\n            send(null, {rawData : {sheet: _sheet.id, worksheet: _worksheet.worksheet.id}});\n        })\n        .catch(function(error) {\n            send(error);\n        });\n} else {\n    send(new Error(\"Missing properties\"));\n}",
  "metadata": {
    "author": "",
    "category": "Google",
    "description": "Write to Google Sheets\n\nWrites a value to a given Google Sheets file. If this file does not exist then it will be created.\nThe worksheet where the data is written to defaults to Data if no input given\n\n<p>\n<strong>Multiple column support: </strong>begin by specifing the header of the worksheet in the column property.\nThis is a ||| seperated list. When you don't specify this than by default it will make them for you (eg: <code>temperature|||humidity</code>).\nThen in message specify your list of items seperated by '|||'. The first value (timestamp) will automaticly be added, so you dont need to specify this (eg: <code>18.4|||65</code>)\n</p>",
    "iconURL": "https://static.waylay.io/plugs/icons/sheets.png",
    "supportedStates": [],
    "requiredProperties": [
      "file",
      "message",
      "timezone",
      "worksheet",
      "columns",
      "decimalSeperator"
    ],
    "requiredRawData": []
  }
}
