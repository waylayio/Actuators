{
  "name": "waylaySaveMetadata",
  "version": "1.1.2",
  "type": "actuator",
  "script": "var resource = waylayUtil.getProperty(options, \"resource\") || waylayUtil.getResource(options)  \nvar payload = options.requiredProperties.payload\nvar msg\n\nif(resource === '$')\n  resource = options.node.NAME\n\nif(resource === undefined || resource === \"\"){\n    send(new Error(\"resource not defined\"))\n}\n\nif(payload){\n    try{\n       msg = waylayUtil.template(options, payload)    \n       if (typeof msg === 'string') {\n           console.log(\"trying to parse to JSON\")\n            msg = JSON.parse(msg);\n        }\n        console.log(msg);\n    } catch(err){\n        console.log(\"trying using raw data\")\n        try {\n            msg = waylayUtil.getRawData(options, payload)\n        } catch(err){\n            console.log(\"raw data failed with \" + err)\n        }\n    } \n} else {\n    try {\n        msg = waylayUtil.getRawData(options, options.node.NAME)\n    } catch(err){\n        console.log(\"trying raw data failed for: \" + options.node.NAME)\n    }\n}\n\nmsg.id = resource\n\nwaylay.resources.create(msg)\n.then(response =>{\n    send()\n})\n.catch(err =>{\n    if(err.response && 409 == err.response.status ) {\n        console.log(\"trying update\", msg)\n        waylay.resources.update(resource, msg)\n        .then(response =>{\n            send()\n        })\n        .catch(err =>{\n            send(new Error(err))\n        })\n    } else {\n        send(new Error(err))\n    }\n})\n\n",
  "metadata": {
    "author": "Waylay",
    "category": "Waylay",
    "description": "waylaySaveMetadata\nResource is etiher provided from the input field, raw data or from the resource \nassoisated with a node to which this actuator is attached.\nPayload is either an input (which can be parsed with template as well), or a rawData.\nAs from version 1.1.0. it uses waylay nmp package (sandbox 0.14.0)\n",
    "iconURL": "https://static.waylay.io/plugs/icons/waylay-save-meta-data.png",
    "supportedStates": [],
    "requiredProperties": [
      "resource",
      "payload"
    ],
    "requiredRawData": []
  }
}
