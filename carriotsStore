{
  "name": "carriotsStore",
  "version": "0.0.5",
  "type": "actuator",
  "script": "var token = options.globalSettings.Carriots_key;\nvar resource  = options.requiredProperties.resource || options.node.RESOURCE ||  options.task.RESOURCE || options.node.NAME;\nvar payload = options.requiredProperties.payload;\nvar msg;\n\n\nvar storeMessage = function(msg){\n    var deferred = Q.defer();\n    console.log(\"storing message \" + JSON.stringify(msg));\n      var options = {\n        url: 'http://api.carriots.com/streams',\n       \n        json:{\n            protocol: \"v1\",\n            device: resource,\n            at:\"now\",\n            data: msg\n        },\n        \n        headers: {\n            \"carriots.apikey\" : token,\n            \"Content-Type\":\"application/json\",\n            \"User-Agent\" : resource\n        }\n    };\n    \n    \n    request.post(options, function(error, response, body) {\n        if (!error && response.statusCode == 200) {\n            console.log(response);\n            console.log(\"message stored \" + JSON.stringify(msg));\n            deferred.resolve(response);\n        } else{\n            console.log(response);\n            deferred.reject(response);\n        }\n    });\n    return deferred.promise;\n}\n\n\nif(token){\n    if(payload){\n        try{\n           msg = waylayUtil.template(options, payload);    \n           if (typeof msg === 'string') {\n               console.log(\"trying to parse to JSON\");\n                msg = JSON.parse(msg);\n            }\n            console.log(\"Parsed using eval\");\n            console.log(msg);\n        } catch(err){\n            console.log(\"eval failed with \" + err);\n            console.log(\"trying using raw data\");\n            try {\n                msg = waylayUtil.getRawData(options, payload);\n            } catch(err){\n                console.log(\"raw data failed with \" + err);\n            }\n        } \n    } else {\n        try {\n            msg = waylayUtil.getRawData(options, options.node.NAME);\n        } catch(err){\n            console.log(\"trying raw data failed for: \" + options.node.NAME);\n        }\n    }\n    if(msg !== undefined || (Array.isArray(msg) && msg.length !== 0)){\n        if(!Array.isArray(msg)){\n            msg = [msg];\n        }\n        var promises = msg.map(function(q) {\n            return storeMessage(q);\n        });\n        console.log(\"sending..\");\n        Q.all(promises).then(function(){\n            console.log(\"DONE\"); \n            send();\n        }).fail(function(err){\n            send(new Error(\"Storing data failed\"));\n        });\n    } else{\n        send(new Error(\"Missing properties: [msg]\"));\n    }\n} else{\n    send(new Error(\"Missing token\"));\n}\n\n",
  "metadata": {
    "author": "Suat",
    "category": "Experimental",
    "description": "Carriots actuator\n\nThis actuator will store the payload in the carriots stream .\n\nActuator will post a payload using the resource as the identifier.\nInput parameters are:\n<ul>\n<li>resource, if not provided it will use as the resouece the node's resource name OR the resourrce of the task OR the name of the node</li>\n<li>payload (must be provided), which will be pre-processed with  waylayUtil.template or if not provided, will use the raw data of the item</li>\n</ul>\n",
    "documentationURL": "https://www.carriots.com/documentation/api/data_management",
    "iconURL": "https://avatars0.githubusercontent.com/u/7299477?v=3&s=200",
    "supportedStates": [],
    "requiredProperties": [
      "resource",
      "payload"
    ],
    "requiredRawData": []
  }
}
